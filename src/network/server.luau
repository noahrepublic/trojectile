--!native
--!optimize 2
--!nolint FunctionUnused
--!nolint LocalUnused
--!nolint LocalShadow
--#selene: allow(unused_variable)
--#selene: allow(shadowing)
-- Server generated by Zap v0.3.1 (https://github.com/red-blox/zap)
local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function alloc_inst(inst: Instance)
	table.insert(outgoing_inst, inst)

	return #outgoing_inst
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if game:GetService("RunService"):IsClient() then
	error("Cannot use the server module on the client!")
end

local reliable = Instance.new("RemoteEvent")
reliable.Name = "ZAP_RELIABLE"
reliable.Parent = game:GetService("ReplicatedStorage")

local unreliable = Instance.new("RemoteEvent")
unreliable.Name = "ZAP_UNRELIABLE"
unreliable.Parent = game:GetService("ReplicatedStorage")

local player_map = {}

game:GetService("Players").PlayerAdded:Connect(function(player)
	player_map[player] = {
		buff = buffer.create(64),
		used = 0,
		size = 64,
		inst = {},
	}
end)

game:GetService("Players").PlayerRemoving:Connect(function(player)
	player_map[player] = nil
end)

game:GetService("RunService").Heartbeat:Connect(function()
	for player, outgoing in player_map do
		if outgoing.used > 0 then
			local buff = buffer.create(outgoing.used)
			buffer.copy(buff, 0, outgoing.buff, 0, outgoing.used)

			reliable:FireClient(player, buff, outgoing.inst)

			outgoing.buff = buffer.create(64)
			outgoing.used = 0
			outgoing.size = 64
			table.clear(outgoing.inst)
		end
	end
end)
export type clientProjectileData = ({
	origin: (Vector3),
	direction: (Vector3),
	projectileType: (string),
	p: (boolean),
})
function types.write_clientProjectileData(value: clientProjectileData)
	alloc(4)
	buffer.writef32(outgoing_buff, outgoing_apos, value.origin.X)
	alloc(4)
	buffer.writef32(outgoing_buff, outgoing_apos, value.origin.Y)
	alloc(4)
	buffer.writef32(outgoing_buff, outgoing_apos, value.origin.Z)
	alloc(4)
	buffer.writef32(outgoing_buff, outgoing_apos, value.direction.X)
	alloc(4)
	buffer.writef32(outgoing_buff, outgoing_apos, value.direction.Y)
	alloc(4)
	buffer.writef32(outgoing_buff, outgoing_apos, value.direction.Z)
	local len = #value.projectileType
	alloc(2)
	buffer.writeu16(outgoing_buff, outgoing_apos, len)
	alloc(len)
	buffer.writestring(outgoing_buff, outgoing_apos, value.projectileType, len)
	alloc(1)
	buffer.writeu8(outgoing_buff, outgoing_apos, value.p and 1 or 0)
end
function types.read_clientProjectileData()
	local value;
	value = {}
	local x = buffer.readf32(incoming_buff, read(4))
	local y = buffer.readf32(incoming_buff, read(4))
	local z = buffer.readf32(incoming_buff, read(4))
	value.origin = Vector3.new(x, y, z)
	local x = buffer.readf32(incoming_buff, read(4))
	local y = buffer.readf32(incoming_buff, read(4))
	local z = buffer.readf32(incoming_buff, read(4))
	value.direction = Vector3.new(x, y, z)
	local len = buffer.readu16(incoming_buff, read(2))
	value.projectileType = buffer.readstring(incoming_buff, read(len), len)
	value.p = buffer.readu8(incoming_buff, read(1)) == 1
	return value
end
export type serverProjectileData = ({
	t: (number),
	origin: (Vector3),
	direction: (Vector3),
	projectileType: (string),
	player: (Player),
})
function types.write_serverProjectileData(value: serverProjectileData)
	alloc(4)
	buffer.writeu32(outgoing_buff, outgoing_apos, value.t)
	alloc(4)
	buffer.writef32(outgoing_buff, outgoing_apos, value.origin.X)
	alloc(4)
	buffer.writef32(outgoing_buff, outgoing_apos, value.origin.Y)
	alloc(4)
	buffer.writef32(outgoing_buff, outgoing_apos, value.origin.Z)
	alloc(4)
	buffer.writef32(outgoing_buff, outgoing_apos, value.direction.X)
	alloc(4)
	buffer.writef32(outgoing_buff, outgoing_apos, value.direction.Y)
	alloc(4)
	buffer.writef32(outgoing_buff, outgoing_apos, value.direction.Z)
	local len = #value.projectileType
	alloc(2)
	buffer.writeu16(outgoing_buff, outgoing_apos, len)
	alloc(len)
	buffer.writestring(outgoing_buff, outgoing_apos, value.projectileType, len)
	alloc(2)
	buffer.writeu16(outgoing_buff, outgoing_apos, alloc_inst(value.player))
end
function types.read_serverProjectileData()
	local value;
	value = {}
	value.t = buffer.readu32(incoming_buff, read(4))
	local x = buffer.readf32(incoming_buff, read(4))
	local y = buffer.readf32(incoming_buff, read(4))
	local z = buffer.readf32(incoming_buff, read(4))
	value.origin = Vector3.new(x, y, z)
	local x = buffer.readf32(incoming_buff, read(4))
	local y = buffer.readf32(incoming_buff, read(4))
	local z = buffer.readf32(incoming_buff, read(4))
	value.direction = Vector3.new(x, y, z)
	local len = buffer.readu16(incoming_buff, read(2))
	value.projectileType = buffer.readstring(incoming_buff, read(len), len)
	value.player = incoming_inst[buffer.readu16(incoming_buff, read(2))]
	assert(value.player ~= nil)
	assert(value.player == nil or value.player:IsA(Player))
	return value
end
local events = table.create(2)
reliable.OnServerEvent:Connect(function(player, buf, inst)
	incoming_buf = buf
	incoming_inst = inst
	incoming_read = 0
	local len = buffer.len(buf)
	while incoming_read < len do
		local id = buffer.readu8(buf, read(1))
		if id == 1 then
			local value
			value = types.read_clientProjectileData()
			if events[{id}] then
				task.spawn(events[1], player, value)
			end
		else
			error("Unknown event id")
		end
	end
end)
return {
	Trojectile_SERVER = {
		Fire = function(Player: Player, Value: (serverProjectileData))
			load(player_map[Player])
			local pos = alloc(1)
			buffer.writeu8(outgoing_buff, pos, 2)
			types.write_serverProjectileData(Value)
			player_map[Player] = save()
		end,
		FireAll = function(Value: (serverProjectileData))
			load_empty()
			local pos = alloc(1)
			buffer.writeu8(outgoing_buff, pos, 2)
			types.write_serverProjectileData(Value)
			local buf, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player, outgoing in player_map do
				load(outgoing)
				local pos = alloc(used)
				buffer.copy(outgoing_buff, pos, buf, 0, used)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: (serverProjectileData))
			load_empty()
			local pos = alloc(1)
			buffer.writeu8(outgoing_buff, pos, 2)
			types.write_serverProjectileData(Value)
			local buf, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player, outgoing in player_map do
				if player ~= Except then
					load(outgoing)
					local pos = alloc(used)
					buffer.copy(outgoing_buff, pos, buf, 0, used)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: (serverProjectileData))
			load_empty()
			local pos = alloc(1)
			buffer.writeu8(outgoing_buff, pos, 2)
			types.write_serverProjectileData(Value)
			local buf, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load(player_map[player])
				local pos = alloc(used)
				buffer.copy(outgoing_buff, pos, buf, 0, used)
				player_map[player] = save()
			end
		end,
	},
	Trojectile_CLIENT = {
		SetCallback = function(Callback: (Player, (clientProjectileData)) -> ())
			events[1] = Callback
		end,
	},
}
